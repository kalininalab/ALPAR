
import re
from contextlib import suppress
from concurrent.futures import ThreadPoolExecutor, as_completed
from pathlib import Path

import polars as pl
from Bio.SeqIO.InsdcIO import GenBankIterator
from pydantic import BaseModel, Field, FilePath, NewPath, PositiveInt
with suppress(ImportError):
    from snakemake.script import snakemake


class SnakemakeHandler(BaseModel):
    """Validator for snakemake io."""

    input: list[FilePath] = Field(
        description='Paths to each .gbk file generated by Prokka.'
    )
    output: NewPath = Field(
        description='Path to where protein positions will be saved.'
    )
    threads: PositiveInt = Field(
        default=1,
        description='Number of threads to use for parallel processing.'
    )


    def protein_positions_from_gbk(self) -> None:
        """Create protein positions table from prokka .gbk files."""
        list_of_protein_positions = list[pl.DataFrame]()
        with ThreadPoolExecutor(max_workers=self.threads) as executor:
            futures = [
                executor.submit(self.transform_gbk_file, input_file)
                for input_file in self.input
            ]

            for future in as_completed(futures):
                result = future.result()
                list_of_protein_positions.append(result)

        df = pl.concat(list_of_protein_positions, how='vertical')
        with open(self.output, 'w', encoding='utf-8') as f:
            df.write_csv(f, include_header=False, separator=',')


    @staticmethod
    def transform_gbk_file(gbk_file: Path) -> pl.DataFrame:
        """Create protein positions.

        Take prokka .gbk file, read through genbank format, and extract
        the positions and names of the proteins.
        
        Parameters
        ----------
        gbk_file: Path
            Path to the prokka .gbk file.
        
        Returns
        -------
        pl.DataFrame
            DataFrame with the protein name and middle position.
        """
        list_of_protein_positions = list[tuple[str, int]]()

        for record in GenBankIterator(gbk_file):
            for feature in record.features:
                if ('locus_tag' in feature.qualifiers and
                    'product' in feature.qualifiers):

                    protein_position = (feature.location.start   + feature.location.end) // 2
                    protein_name = '_'.join((
                        gbk_file.stem,
                        feature.qualifiers['locus_tag'][0],
                        feature.qualifiers['product'][0]
                    ))
                    protein_name_sub = re.sub(r'\W', r'_', protein_name).strip('_')

                    list_of_protein_positions.append(
                        (protein_name_sub, protein_position)
                    )

        df = pl.DataFrame(
            list_of_protein_positions,
            schema=(('protein_name', pl.String), ('protein_position', pl.Int32)),
            orient='row'
        )

        return df


if __name__ == '__main__':
    smk_val = SnakemakeHandler(
        input=snakemake.input,
        output=snakemake.output[0],
        threads=snakemake.threads
    )
    smk_val.protein_positions_from_gbk()
